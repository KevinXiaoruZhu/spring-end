<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.PT.dao.StaffMapper">
    <resultMap id="BaseResultMap" type="map" >
        <result column="id" property="staffId" />
        <result column="name" property="name" />
        <result column="phone" property="phone" />
    </resultMap>
    <select id="selectByManagerId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
      select userTable.id, userTable.name ,userTable.phone phone
      from ykat_users userTable inner join ykat_employee_relations relationTable on relationTable.employee_id = userTable.id
      inner join ykat_stores storeTable on storeTable.id = relationTable.store_id
      where storeTable.user_id = #{id,jdbcType=INTEGER} and userTable.role=1
    </select>
    <select id="selectByFactor" parameterType="map" resultMap="BaseResultMap">
      select userTable.id, userTable.name ,userTable.phone phone
      from ykat_users userTable inner join ykat_employee_relations relationTable on relationTable.employee_id = userTable.id
        inner join ykat_stores storeTable on storeTable.id = relationTable.store_id
      where storeTable.user_id = #{map.id,jdbcType=INTEGER} and userTable.role=1
        <if test="map.content != null and map.content != ''" >
            and ( userTable.phone like '%${map.content}%' or userTable.name like '%${map.content}%')
        </if>
        order by userTable.id desc
    </select>
    <select id="countByManagerId" parameterType="java.lang.Integer" resultType="java.lang.Integer" >
        select count(*)
        from ykat_users userTable inner join ykat_employee_relations relationTable on relationTable.employee_id = userTable.id
        inner join ykat_stores storeTable on storeTable.id = relationTable.store_id
        where storeTable.user_id = #{id,jdbcType=INTEGER}
    </select>
    <select id="countByFactor" parameterType="map" resultType="java.lang.Integer">
        select count(*)
        from ykat_users userTable inner join ykat_employee_relations relationTable on relationTable.employee_id = userTable.id
        inner join ykat_stores storeTable on storeTable.id = relationTable.store_id
        where storeTable.user_id = #{map.id,jdbcType=INTEGER} and userTable.role=1
        <if test="map.content != null and map.content != ''" >
            and ( userTable.phone like '%${map.content}%' or userTable.name like '%${map.content}%')
        </if>
    </select>
    <delete id="deleteRelationByUserId" parameterType="java.lang.Integer">
        delete from ykat_employee_relations
        where employee_id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insertStaffSelective" keyProperty="id" parameterType="com.PT.entity.User">
        insert into ykat_users
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="role != null" >
                role,
            </if>
            <if test="phone != null" >
                phone,
            </if>
            <if test="createdAt != null" >
                created_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null" >
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="role != null" >
                #{role,jdbcType=INTEGER},
            </if>
            <if test="phone != null" >
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null" >
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <insert id="insertRelation" parameterType="map">
      {
          call insert_employee_relation_p(
              #{map.userId,mode=IN,jdbcType=INTEGER},
              #{map.staffId,mode=IN,jdbcType=INTEGER}
          )
      }
    </insert>
</mapper>
